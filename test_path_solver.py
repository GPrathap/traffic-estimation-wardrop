'''
Created on Jul 23, 2014

@author: jeromethai
'''

import numpy as np
import ue_solver as ue
import path_solver as path
from cvxopt import matrix
from test_graph import los_angeles

paths = [[8,35,7,6,5],
             [8,35,7,6,12,5],
             [17,8,35,7,6,5],
             [17,8,35,7,6,12,5],
             [17,36,35,7,6,5],
             [17,36,35,7,6,12,5],
             [24,17,8,35,7,6,5],
             [24,17,8,35,7,6,12,5],
             [24,17,36,35,7,6,5],
             [24,17,36,35,7,6,12,5],
             [24,37,36,35,7,6,5],
             [24,37,36,35,7,6,12,5],
             [9,41,8,35,7,6,5],
             [9,41,8,35,7,6,12,5],
             [18,9,41,8,35,7,6,5],
             [18,9,41,8,35,7,6,12,5],
             [26,18,9,41,8,35,7,6,5],
             [26,18,9,41,8,35,7,6,12,5],
             [10,9,41,8,35,7,6,5],
             [10,9,41,8,35,7,6,12,5],
             [19,18,9,41,8,35,7,6,5],
             [19,18,9,41,8,35,7,6,12,5],
             [27,26,18,9,41,8,35,7,6,5],
             [27,26,18,9,41,8,35,7,6,12,5],
             [29,21,14,34,12,5],
             [29,21,14,13,12,5],
             [29,21,14,34,12,6,5],
             [29,21,14,13,12,6,5],
             [30,28,22,15,13,12,5],
             [30,28,23,16,15,13,12,5],
             [30,28,22,15,13,12,6,5],
             [30,28,23,16,15,13,12,6,5],
             [31,28,22,15,13,12,5],
             [31,28,23,16,15,13,12,5],
             [31,28,22,15,13,12,6,5],
             [31,28,23,16,15,13,12,6,5],
             [2,6,12,34,14,21,20],
             [2,6,12,13,14,21,20],
             [2,7,44,13,14,21,20],
             [6,12,34,14,21,20],
             [6,12,13,14,21,20],
             [7,44,13,14,21,20],
             [29,21,20],
             [30,28,22,21,20],
             [31,28,22,21,20],
             [40,38,37,23,22,21,20],
             [40,38,28,22,21,20],
             [24,37,23,22,21,20],
             [24,37,36,16,15,14,21,20],
             [24,17,36,16,15,14,21,20],
             [17,36,16,15,14,21,20],
             [17,36,37,23,22,21,20],
             [17,24,37,23,22,21,20],
             [2,6,12,34,14,15,22],
             [2,6,12,13,15,22],
             [2,6,12,13,14,15,22],
             [4,5,12,34,14,15,22],
             [4,5,12,13,15,22],
             [4,5,12,13,14,15,22],
             [4,5,6,12,34,14,15,22],
             [4,5,6,12,13,15,22],
             [4,5,6,12,13,14,15,22],
             [5,12,34,14,15,22],
             [5,12,13,15,22],
             [5,12,13,14,15,22],
             [5,6,12,34,14,15,22],
             [5,6,12,13,15,22],
             [5,6,12,13,14,15,22],
             [6,12,34,14,15,22],
             [6,12,13,15,22],
             [6,12,13,14,15,22],
             [7,44,13,15,22],
             [7,44,13,14,15,22],
             [8,17,36,16,15,22],
             [8,17,24,37,23,22],
             [9,41,8,17,36,16,23,22],
             [9,41,8,17,24,37,23,22],
             [9,18,42,17,36,16,23,22],
             [9,18,42,17,24,37,23,22],
             [10,9,41,8,17,36,16,23,22],
             [10,9,41,8,17,24,37,23,22],
             [10,9,18,42,17,36,16,23,22],
             [10,9,18,42,17,24,37,23,22],
             [11,34,14,15,22],
             [11,34,14,21,22],
             [17,36,16,23,22],
             [17,24,37,23,22],
             [18,42,17,36,16,23,22],
             [18,42,17,24,37,23,22],
             [19,18,42,17,36,16,23,22],
             [19,18,42,17,24,37,23,22],
             [20,21,22],
             [20,21,14,15,22],
             [24,37,23,22],
             [24,17,36,16,23,22],
             [25,43,24,37,23,22],
             [25,43,24,17,36,16,23,22],
             [26,25,43,24,37,23,22],
             [26,25,43,24,17,36,16,23,22],
             [27,26,25,43,24,37,23,22],
             [27,26,25,43,24,17,36,16,23,22],
             [29,21,22],
             [29,21,14,15,22],
             [30,28,22],
             [30,28,23,22],
             [31,28,22],
             [31,28,23,22],
             [33,25,43,24,37,23,22],
             [33,25,43,24,17,36,16,23,22]]

def test1(delaytype):
    if delaytype == 'Polynomial': theta = matrix([0.0, 0.0, 0.0, 0.15, 0.0, 0.0])
    if delaytype == 'Hyperbolic': theta = (3.5, 3.0)
    graph = los_angeles(theta, delaytype)[0]
    for p in paths: graph.add_path_from_nodes(p)
    graph.visualize(general=True, ODs=True, links=True, paths=True)
    P = path.linkpath_incidence(graph)
    print P.size
    U,r = path.simplex(graph)
    print U.size
    print r.size
    print path.solver_init(U,r).size
    l1 = ue.solver(graph)
    l2 = P*path.solver(graph)
    print abs(l1-l2)
    print np.linalg.norm(l1 - l2)


def main():
    #test1('Hyperbolic')
    test1('Polynomial')


if __name__ == '__main__':
    main()