'''
Created on Jun 6, 2014

@author: jeromethai
'''

import numpy as np
import ue_solver as ue
import inverse_opt as invopt
from test_graph import los_angeles
import matplotlib.pyplot as plt
from cvxopt import matrix
from util import add_noise

a, b = 3.5, 3.0
coef = matrix([0.0, 0.0, 0.0, 0.15, 0.0, 0.0])
degree = len(coef)
graph = los_angeles(coef, 'Polynomial')[0]
    
    
def display_results(true_linkflows, est_linkflows, true_theta, best_theta, delaytype, beta):
    """Display results
    
    Parameters
    ----------
    true_linkflows: list of true linkflows
    est_linkflows: list of estimated linkflows
    true_theta: true parameters
    best_theta: best parameters
    """
    error = np.linalg.norm(matrix(true_linkflows) - matrix(est_linkflows))
    xdata = np.linspace(0.0, 2.5, num=100)
    vals = [1+(best_theta.T * matrix(np.power(x,range(1,degree+1))))[0] for x in xdata]
    if delaytype == 'Polynomial':
        true_vals = [1+(true_theta.T * matrix(np.power(x,range(1,degree+1))))[0] for x in xdata]
    if delaytype == 'Hyperbolic':
        a,b = true_theta
        true_vals = [1 - a/b + a/(b-x) for x in xdata]
    plt.plot(xdata, vals, 'b', label='estimate')
    plt.plot( xdata, true_vals, 'r', label='true')
    plt.xlabel('Link flow (1000 veh/h)')
    plt.ylabel('Delay')
    plt.title(r'Estimated delay function, error={:.3f}, beta={:.0e}'.format(error, beta))
    plt.legend()
    plt.show()
    
    
def get_graphs_linkflows(theta, delaytype='Polynomial', noise=0.0):
    """Given parameters theta, get L.A. graphs and associated UE linkflows for polynomial delay functions
    """
    g1, g2, g3, g4 = los_angeles(theta, delaytype, noise)
    l1, l2, l3, l4 = ue.solver(g1), ue.solver(g2), ue.solver(g3), ue.solver(g4)
    return g1, g2, g3, g4, l1, l2, l3, l4
    
    
def test1(indlinks_obs, delaytype, betas, noise=0.0):
    """find parameters that minimizes the distance between x^obs_true in NOISY case
    and x^obs generated by each candidate function with PARTIAL observation
    """
    if delaytype == 'Polynomial': true_theta = coef
    if delaytype == 'Hyperbolic': true_theta = (a,b)
    g1, g2, g3, g4, l1, l2, l3, l4 = get_graphs_linkflows(true_theta, delaytype=delaytype)
    obs = [g1.indlinks[id] for id in indlinks_obs]
    obs = [int(i) for i in list(np.sort(obs))]
    x1,x2,x3,x4 = l1,l2,l3,l4
    if noise > 0.0:
        x1, x2, x3, x4 = add_noise(l1,noise), add_noise(l2,noise), add_noise(l3,noise), add_noise(l4,noise)
        g1, g2, g3, g4 = los_angeles(true_theta, 'Polynomial', noise)
    theta, xs, beta = invopt.main_solver([g1,g2,g3,g4], [x1[obs],x2[obs],x3[obs],x4[obs]], obs, degree, betas)
    display_results([l1,l2,l3,l4], xs, true_theta, theta, delaytype, beta)


def test4(indlinks_obs, delaytype, betas, noise=0.0, trials):
    pass
    


def main():
    
    type = 'Polynomial'
    type = 'Hyperbolic'
    ind_obs = {}
    ind_obs[0] = graph.indlinks.keys()
    ind_obs[1] = [(36,37,1), (13,14,1), (17,8,1), (24,17,1), (28,22,1), (14,13,1), (17,24,1), (24,40,1), (14,21,1), (16,23,1)]
    ind_obs[2] = [(17,24,1), (24,40,1), (14,21,1), (16,23,1)]
    ind_obs[3] = [(10,9,1), (19,18,1), (4,5,1), (29,21,1)]
    noise = 1/30.0
    betas = [1e-2, 1e0, 1e2, 1e4, 1e6]
    for k in range(len(ind_obs)): test1(ind_obs[k], type, betas, noise)
    
if __name__ == '__main__':
    main()